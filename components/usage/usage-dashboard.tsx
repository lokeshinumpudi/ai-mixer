"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { fetcher } from "@/lib/utils";
import { ChevronLeft, ChevronRight, DollarSign, Info, Zap } from "lucide-react";
import { useState } from "react";
import useSWR from "swr";

// Tooltip constants to avoid hardcoding in UI
const USAGE_TOOLTIPS = {
  MODEL_NAME: "Name of the AI models from [OpenAI, Anthropic,xAI,Google, etc.]",
  TOKENS_IN: "Input tokens/words sent to the AI model",
  TOKENS_OUT: "Output tokens/words generated by the AI model",
  COST: "Compute cost that's being charged by AI Model companies",
  TOKENS_IN_SHORT: "Input tokens/words sent to the AI model",
  TOKENS_OUT_SHORT: "Output tokens/words generated by the AI model",
  COST_SHORT: "Compute cost that's being charged by AI Model companies",
} as const;

interface ChatUsage {
  id: string;
  chatId: string | null;
  userId: string;
  modelId: string;
  tokensIn: number;
  tokensOut: number;
  cost: number; // in cents
  createdAt: string;
}

interface UsageData {
  items: ChatUsage[];
  total: number;
  page: number;
  limit: number;
  hasMore: boolean;
  limits: {
    quota: number;
    used: number;
    remaining: number;
    type: "daily" | "monthly";
    resetInfo: string;
  };
  currentUsage: {
    totalTokens: string;
    totalCost: number;
    totalChats: string;
    activeChats: string;
  };
  warnings: Array<{
    type: string;
    message: string;
    severity: string;
  }>;
}

// Helper component for table headers with tooltips
function TableHeaderWithTooltip({
  children,
  tooltip,
  className = "",
}: {
  children: React.ReactNode;
  tooltip: string;
  className?: string;
}) {
  return (
    <th className={`text-left p-3 text-sm font-medium ${className}`}>
      <Tooltip>
        <TooltipTrigger asChild>
          <div className="flex items-center gap-1 cursor-help">
            {children}
            <Info className="size-3 text-muted-foreground hover:text-foreground" />
          </div>
        </TooltipTrigger>
        <TooltipContent>
          <p className="text-xs">{tooltip}</p>
        </TooltipContent>
      </Tooltip>
    </th>
  );
}

export function UsageDashboard() {
  const [page, setPage] = useState(1);
  const limit = 10; // Simple pagination

  const {
    data: usageData,
    error,
    isLoading,
  } = useSWR<UsageData>(`/api/usage?page=${page}&limit=${limit}`, fetcher, {
    revalidateOnFocus: false,
    refreshInterval: 30000, // Refresh every 30 seconds
  });

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <p className="text-destructive">Failed to load usage data</p>
        </CardContent>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <div className="space-y-6">
        {/* Loading skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {["messages", "tokens", "cost", "chats"].map((type) => (
            <Card key={type}>
              <CardContent className="p-6">
                <div className="h-8 bg-muted animate-pulse rounded mb-2" />
                <div className="h-4 bg-muted animate-pulse rounded w-24" />
              </CardContent>
            </Card>
          ))}
        </div>
        <Card>
          <CardContent className="p-6">
            <div className="h-64 bg-muted animate-pulse rounded" />
          </CardContent>
        </Card>
      </div>
    );
  }

  const { items, limits, currentUsage, warnings } = usageData || {
    items: [],
    limits: {
      quota: 50,
      used: 0,
      remaining: 50,
      type: "daily" as const,
      resetInfo: "",
    },
    currentUsage: {
      totalTokens: "0",
      totalCost: 0,
      totalChats: "0",
      activeChats: "0",
    },
    warnings: [],
  };

  const usagePercentage = Math.min(
    100,
    Math.round((limits.used / limits.quota) * 100)
  );

  return (
    <TooltipProvider>
      <div className="space-y-6">
        {/* Usage Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-2">
                <Zap className="size-4 text-orange-500" />
                <div className="text-2xl font-bold">
                  {Number(currentUsage.totalTokens).toLocaleString()}
                </div>
              </div>
              <p className="text-xs text-muted-foreground">Total Tokens</p>
              <p className="text-xs text-muted-foreground">Input + Output</p>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-2">
                <DollarSign className="size-4 text-green-500" />
                <div className="text-2xl font-bold">
                  ${(currentUsage.totalCost / 100).toFixed(4)}
                </div>
              </div>
              <p className="text-xs text-muted-foreground">Total Cost</p>
              <p className="text-xs text-muted-foreground">All time</p>
            </CardContent>
          </Card>
        </div>

        {/* Warnings */}
        {warnings.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-lg text-orange-600">
                Usage Warnings
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {warnings.map((warning) => (
                  <div
                    key={`${warning.type}-${warning.message}`}
                    className="p-3 rounded-lg border border-orange-200 bg-orange-50 text-orange-800"
                  >
                    {warning.message}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Usage History Table */}
        <Card>
          <CardHeader>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
              <CardTitle className="text-lg">Recent Usage</CardTitle>
              <div className="flex items-center justify-center sm:justify-end gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setPage(Math.max(1, page - 1))}
                  disabled={page === 1}
                  className="flex items-center gap-1"
                >
                  <ChevronLeft className="size-4" />
                  <span className="hidden sm:inline">Previous</span>
                </Button>
                <span className="text-sm text-muted-foreground px-2">
                  Page {page}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setPage(page + 1)}
                  disabled={!usageData?.hasMore}
                  className="flex items-center gap-1"
                >
                  <span className="hidden sm:inline">Next</span>
                  <ChevronRight className="size-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {items.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                No usage data available
              </div>
            ) : (
              <>
                {/* Mobile: Card layout */}
                <div className="md:hidden space-y-3">
                  {items.map((item) => (
                    <div
                      key={item.id}
                      className="p-4 rounded-lg border bg-card hover:bg-muted/50 transition-colors"
                    >
                      <div className="flex items-center justify-between mb-3">
                        <div className="text-sm font-medium">
                          {new Date(item.createdAt).toLocaleDateString(
                            "en-US",
                            {
                              month: "short",
                              day: "numeric",
                              hour: "2-digit",
                              minute: "2-digit",
                            }
                          )}
                        </div>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="flex items-center gap-1 cursor-help">
                              <Badge variant="secondary" className="text-xs">
                                {item.modelId.split("/")[1] || item.modelId}
                              </Badge>
                              <Info className="size-2.5 text-muted-foreground hover:text-foreground" />
                            </div>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p className="text-xs">
                              {USAGE_TOOLTIPS.MODEL_NAME}
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </div>

                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <div className="text-muted-foreground text-xs mb-1">
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div className="flex items-center gap-1 cursor-help">
                                  Tokens In
                                  <Info className="size-2.5 text-muted-foreground hover:text-foreground" />
                                </div>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="text-xs">
                                  {USAGE_TOOLTIPS.TOKENS_IN}
                                </p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <div className="font-medium">
                            {item.tokensIn.toLocaleString()}
                          </div>
                        </div>
                        <div>
                          <div className="text-muted-foreground text-xs mb-1">
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div className="flex items-center gap-1 cursor-help">
                                  Tokens Out
                                  <Info className="size-2.5 text-muted-foreground hover:text-foreground" />
                                </div>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="text-xs">
                                  {USAGE_TOOLTIPS.TOKENS_OUT}
                                </p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <div className="font-medium">
                            {item.tokensOut.toLocaleString()}
                          </div>
                        </div>
                        <div>
                          <div className="text-muted-foreground text-xs mb-1">
                            Total Tokens
                          </div>
                          <div className="font-medium">
                            {(item.tokensIn + item.tokensOut).toLocaleString()}
                          </div>
                        </div>
                        <div>
                          <div className="text-muted-foreground text-xs mb-1">
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div className="flex items-center gap-1 cursor-help">
                                  Cost
                                  <Info className="size-2.5 text-muted-foreground hover:text-foreground" />
                                </div>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="text-xs">{USAGE_TOOLTIPS.COST}</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <div className="font-medium">
                            ${(item.cost / 100).toFixed(4)}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Desktop: Table layout */}
                <div className="hidden md:block overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-3 text-sm font-medium">
                          Date
                        </th>
                        <TableHeaderWithTooltip
                          tooltip={USAGE_TOOLTIPS.MODEL_NAME}
                        >
                          Model
                        </TableHeaderWithTooltip>
                        <TableHeaderWithTooltip
                          tooltip={USAGE_TOOLTIPS.TOKENS_IN_SHORT}
                          className="text-right"
                        >
                          Tokens In
                        </TableHeaderWithTooltip>
                        <TableHeaderWithTooltip
                          tooltip={USAGE_TOOLTIPS.TOKENS_OUT_SHORT}
                          className="text-right"
                        >
                          Tokens Out
                        </TableHeaderWithTooltip>
                        <TableHeaderWithTooltip
                          tooltip={USAGE_TOOLTIPS.COST_SHORT}
                          className="text-right"
                        >
                          Cost
                        </TableHeaderWithTooltip>
                      </tr>
                    </thead>
                    <tbody>
                      {items.map((item) => (
                        <tr
                          key={item.id}
                          className="border-b hover:bg-muted/50"
                        >
                          <td className="p-3 text-sm">
                            {new Date(item.createdAt).toLocaleDateString(
                              "en-US",
                              {
                                month: "short",
                                day: "numeric",
                                hour: "2-digit",
                                minute: "2-digit",
                              }
                            )}
                          </td>
                          <td className="p-3">
                            <Badge variant="secondary" className="text-xs">
                              {item.modelId.split("/")[1] || item.modelId}
                            </Badge>
                          </td>
                          <td className="p-3 text-sm text-right">
                            {item.tokensIn.toLocaleString()}
                          </td>
                          <td className="p-3 text-sm text-right">
                            {item.tokensOut.toLocaleString()}
                          </td>
                          <td className="p-3 text-sm text-right">
                            ${(item.cost / 100).toFixed(4)}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
}
