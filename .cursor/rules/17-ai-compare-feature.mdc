---
description: "AI Compare feature implementation - multi-model comparison system with real-time streaming"
---

# 17: AI Compare Feature

## Overview

The AI Compare feature allows users to compare responses from multiple AI models (1-3) simultaneously in a unified interface. This feature is now the **default experience** with seamless single/multi-model switching.

## Core Architecture

### Database Schema

- **`compareRun`**: Stores comparison sessions with metadata
- **`compareResult`**: Stores individual model responses within a run
- **Composite Primary Key**: `(runId, modelId)` ensures unique model results per run

### API Endpoints

- **`/api/compare/stream`**: SSE endpoint for real-time multi-model streaming
- **`/api/compare/cancel`**: Cancel active compare runs or individual models
- **`/api/compare`**: List compare runs for a chat
- **`/api/compare/[runId]`**: Retrieve specific compare run and results

### Key Components

- **`useCompareRun`**: Hook managing compare state, SSE lifecycle, and API calls
- **`CompareMessage`**: Displays comparison results inline within chat history
- **`MultimodalInput`**: Enhanced with compare mode toggle and model selection
- **`ModelPicker`**: Extended to support multi-model selection (1-3 models)
- **`Chat`**: Orchestrates compare and regular chat modes seamlessly

## Implementation Details

### Default Compare Mode

Compare mode is now the default experience:

```typescript
// components/chat.tsx
const [isCompareMode, setIsCompareMode] = useState(true);
const [selectedModelIds, setSelectedModelIds] = useState<string[]>([]);
```

### Smart Routing Logic

The system intelligently routes based on model selection and **CRITICAL**: always creates user messages:

```typescript
// components/chat.tsx - handleStartCompare
if (modelIds.length === 1) {
  // Single model - use regular chat
  sendMessage({ role: "user", parts: [{ type: "text", text: prompt }] });
} else {
  // Multiple models -  start compare
  await startCompare({ prompt, modelIds });
}
```

**IMPORTANT**: User messages must be created in both flows to ensure proper message alignment and styling.

### Multi-Model Selection

The `ModelPicker` supports both single and multi-selection:

```typescript
// components/model-picker.tsx
const handleModelSelect = (modelId: string) => {
  if (isCompareMode) {
    // Multi-selection logic with COMPARE_MAX_MODELS limit
    const newSelection = selectedModelIds.includes(modelId)
      ? selectedModelIds.filter((id) => id !== modelId)
      : selectedModelIds.length < COMPARE_MAX_MODELS
      ? [...selectedModelIds, modelId]
      : [...selectedModelIds.slice(1), modelId];
    onSelectedModelIdsChange(newSelection);
  } else {
    // Single selection for regular mode
    onModelChange(modelId);
    setOpen(false);
  }
};
```

### Real-Time Streaming

The compare system uses multiplexed SSE streaming:

```typescript
// hooks/use-compare-run.ts
const response = await fetch("/api/compare/stream", {
  method: "POST",
  body: JSON.stringify({ chatId, prompt, modelIds }),
});

// Process SSE events tagged by modelId
for (const line of lines) {
  if (line.startsWith("data: ")) {
    const event = JSON.parse(line.slice(6));
    handleSSEEvent(event); // Updates per-model state
  }
}
```

## User Experience Flow

1. **Default State**: Compare mode active with current model pre-selected
2. **Model Selection**: Users can add/remove models (1-3) via model picker
3. **Smart Submission**:
   - 1 model → Regular chat flow
   - 2+ models → Compare flow with side-by-side results
4. **Inline Results**: Compare results display as `CompareMessage` components in chat history
5. **Continuation**: Users can continue conversations with same or different model selection

## Rate Limiting & Entitlements

Compare operations consume quota per model:

```typescript
// Free tier: 5 messages/day
// Pro tier: 1000 messages/month
// Compare with 2 models = 2 message credits
```

### Upgrade CTAs

Rate limit errors trigger upgrade prompts:

```typescript
// components/chat.tsx
if (error.message.includes("429")) {
  upgradeToast({
    title: "Compare limit reached",
    description:
      "Upgrade to Pro for unlimited model comparisons and 1000 messages per month.",
    actionText: "Upgrade to Pro",
  });
}
```

## Configuration

### Model Limits

```typescript
// lib/constants.ts
export const COMPARE_MAX_MODELS = 3;
```

### Compare Presets

```typescript
// lib/constants.ts
export const COMPARE_PRESETS = {
  "Fast Reasoning Trio": [
    "google/gemini-2.0-flash",
    "openai/gpt-5-nano",
    "xai/grok-code-fast-1",
  ],
  "Vision Models": [
    "google/gemini-2.0-flash",
    "openai/gpt-5-mini",
    "openai/gpt-oss-120b",
  ],
  "Code Specialists": [
    "xai/grok-code-fast-1",
    "openai/gpt-5-mini",
    "google/gemini-2.0-flash",
  ],
};
```

## Stream Registry

Global stream management for cancellation:

```typescript
// lib/cache/stream-registry.ts
declare global {
  var __compare_stream_registry__: Map<string, AbortController>;
  var __stream_cleanup_interval__: NodeJS.Timeout;
}
```

## Security & Validation

- **Authentication**: All endpoints use `authenticatedRoute` decorator
- **Model Access**: Server-side validation via `getAllowedModelIdsForUser`
- **Rate Limiting**: Per-user quota enforcement with detailed logging
- **Input Validation**: Zod schemas for request body validation

## Error Handling

- **ChatSDKError**: Standardized error responses with surface-specific codes
- **Stream Failures**: Graceful degradation with per-model error states
- **Network Issues**: Automatic cleanup and user-friendly error messages

## Critical Implementation Notes

### Historical Compare Runs Loading

Historical compare runs require proper database query implementation:

```typescript
// lib/db/queries.ts - listCompareRunsByChat
const itemsWithResults = await Promise.all(
  items.map(async (run) => {
    const results = await db
      .select()
      .from(compareResult)
      .where(eq(compareResult.runId, run.id))
      .orderBy(asc(compareResult.createdAt));

    return { ...run, results };
  })
);
```

**CRITICAL**: The `listCompareRunsByChat` function MUST load `compareResult` records, not just the run metadata, or historical compare runs will display as empty.

### UI State Management

Proper greeting/suggestions hiding requires checking all content sources:

```typescript
// components/messages.tsx
{messages.length === 0 && compareRuns.length === 0 && !activeCompareMessage && <Greeting />}

// components/multimodal-input.tsx
{messages.length === 0 &&
  compareRuns.length === 0 &&
  !activeCompareMessage &&
  attachments.length === 0 &&
  uploadQueue.length === 0 && (
    <SuggestedActions ... />
  )}
```

### SSE Stream Parsing

Proper SSE chunk handling to avoid partial data corruption:

```typescript
// hooks/use-compare-run.ts
let buffer = "";
while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  buffer += decoder.decode(value, { stream: true });
  const lines = buffer.split("\n");
  buffer = lines.pop() || "";
  // Process complete lines only
}
```

## Future Enhancements

- **Pro-Only Restriction**: Currently available to all logged-in users, can be restricted to Pro tier
- **More Presets**: Additional curated model combinations
- **Export Results**: Save comparison results for later reference
- **Model Recommendations**: Suggest optimal model combinations based on query type
