---
description: AI SDK Gateway model validation rules and unified configuration management
---

# AI SDK Gateway Model Validation Rules

## üö® CRITICAL: No Model Hallucination

**NEVER** reference model IDs that don't exist in the actual configuration. Always check [lib/constants.ts](mdc:lib/constants.ts) before using any model references.

## Current Model Configuration (Gateway Architecture)

### Production Models

**ONLY these models exist in the unified configuration** ([lib/constants.ts](mdc:lib/constants.ts)):

```typescript
// ‚úÖ ACTUAL MODELS - These exist and can be used
export const SUPPORTED_MODELS = {
  "xai/grok-3": {
    supportsReasoning: true,
    supportsArtifacts: true,
  },
  "xai/grok-3-mini": {
    supportsReasoning: true,
    supportsArtifacts: true,
  },
  "openai/gpt-4o-mini": {
    supportsReasoning: false,
    supportsArtifacts: true,
  },
  "openai/gpt-3.5-turbo": {
    supportsReasoning: false,
    supportsArtifacts: false,
  },
  "anthropic/claude-3.5-haiku": {
    supportsReasoning: false,
    supportsArtifacts: true,
  },
  "google/gemini-2.0-flash": {
    supportsReasoning: false,
    supportsArtifacts: true,
  },
  "google/gemma2-9b-it": {
    supportsReasoning: false,
    supportsArtifacts: false,
  },
  "meta/llama-3.1-8b": {
    supportsReasoning: false,
    supportsArtifacts: false,
  },
  "mistral/ministral-3b": {
    supportsReasoning: false,
    supportsArtifacts: false,
  },
  "amazon/nova-lite": {
    supportsReasoning: false,
    supportsArtifacts: true,
  },
  "amazon/nova-micro": {
    supportsReasoning: false,
    supportsArtifacts: false,
  },
} as const;
```

### System Models

**Default models for system functions**:

```typescript
// ‚úÖ SYSTEM MODELS - These exist for internal use
export const DEFAULT_MODEL = "xai/grok-3-mini";
export const DEFAULT_IMAGE_MODEL = "xai/grok-2-image-1212";
```

### Current Providers

**Gateway handles all providers transparently**:

```typescript
// ‚úÖ GATEWAY ARCHITECTURE
gateway.languageModel("xai/grok-3-mini"); // Text models
gateway.imageModel("xai/grok-2-image-1212"); // Image models

// ‚úÖ PRICING TIERS
FREE_MODELS = [
  "xai/grok-3-mini",
  "openai/gpt-3.5-turbo",
  "google/gemma2-9b-it",
];
PRO_MODELS = [
  ...FREE_MODELS,
  "xai/grok-3",
  "openai/gpt-4o-mini",
  "anthropic/claude-3.5-haiku",
];
```

## ‚ùå DO NOT USE - Common Mistakes

### Legacy Model References

**These DO NOT exist in the new architecture**:

```typescript
// ‚ùå LEGACY HARDCODED MODELS - Do not use these
"chat-model"; // Old hardcoded reference
"chat-model-reasoning"; // Old hardcoded reference
"title-model"; // Old system model
"artifact-model"; // Old artifact model
"small-model"; // Old image model

// ‚ùå OLD PROVIDER ABSTRACTIONS - No longer exist
myProvider.languageModel(); // Replaced by gateway
customProvider(); // Replaced by gateway
```

### Non-Existent Models

**These models are NOT implemented**:

```typescript
// ‚ùå THESE DO NOT EXIST - Do not reference these
"xai/grok-4"; // Not yet available
"openai/gpt-5"; // Not yet available
"anthropic/claude-4"; // Not yet available
"mistral/large"; // Not implemented
"cohere/command-r"; // Not implemented
```

## Unified Configuration Rules

### Required Format

All model references MUST use the gateway format:

```typescript
"provider/model-name";
// Examples:
"xai/grok-3-mini"; // ‚úÖ Correct
"openai/gpt-4o-mini"; // ‚úÖ Correct
"anthropic/claude-3.5-haiku"; // ‚úÖ Correct

"grok-3-mini"; // ‚ùå Missing provider prefix
"xai:grok-3-mini"; // ‚ùå Wrong separator (use slash)
```

### Model Properties

Every model MUST have these exact properties in `SUPPORTED_MODELS`:

```typescript
interface ModelCapabilities {
  supportsReasoning: boolean; // Shows step-by-step reasoning
  supportsArtifacts: boolean; // Can use artifact creation tools
}
```

## Gateway Architecture Usage

### 1. Direct Model Access

```typescript
// ‚úÖ CORRECT - Direct gateway usage
import { getLanguageModel } from "@/lib/ai/providers";
import { DEFAULT_MODEL } from "@/lib/constants";

const model = getLanguageModel(DEFAULT_MODEL);
const imageModel = gateway.imageModel(DEFAULT_IMAGE_MODEL);
```

### 2. Capability Checking

```typescript
// ‚úÖ CORRECT - Check capabilities from configuration
import { modelSupports } from "@/lib/ai/providers";

if (modelSupports(selectedModel, "reasoning")) {
  // Enable reasoning features
}

if (modelSupports(selectedModel, "artifacts")) {
  // Enable artifact tools
}
```

### 3. Model Validation

```typescript
// ‚úÖ CORRECT - Validate against configuration
import { isModelSupported, getModelCapabilities } from "@/lib/constants";

if (!isModelSupported(modelId)) {
  throw new Error(`Model ${modelId} not supported`);
}

const capabilities = getModelCapabilities(modelId);
```

## Adding New Models - Required Steps

### ‚ö†Ô∏è BEFORE adding any new model, you MUST:

1. **Verify the model exists** in AI SDK Gateway
2. **Confirm model capabilities** with actual testing
3. **Follow the exact process below**

### Step-by-Step Process

1. **Add to unified configuration** in [lib/constants.ts](mdc:lib/constants.ts):

```typescript
// Add to SUPPORTED_MODELS object
export const SUPPORTED_MODELS = {
  // ... existing models
  "provider/model-name": {
    supportsReasoning: boolean, // Based on actual capabilities
    supportsArtifacts: boolean, // Based on actual capabilities
  },
} as const;
```

2. **Update entitlements** in [lib/ai/entitlements.ts](mdc:lib/ai/entitlements.ts) (if needed):

```typescript
// Control access based on user tier
guest: {
  getAllowedModelIds: () => {
    return SUPPORTED_MODEL_IDS.filter(modelId =>
      !modelId.includes('premium-model')
    );
  },
},
```

3. **Test the integration**:

```typescript
// Verify model works
const capabilities = getModelCapabilities("provider/model-name");
expect(capabilities.supportsReasoning).toBeDefined();
expect(isModelSupported("provider/model-name")).toBe(true);
```

## Validation Rules

### When writing code that references models:

1. **Always import from constants**:

```typescript
import { SUPPORTED_MODEL_IDS, getModelCapabilities } from "@/lib/constants";

// ‚úÖ Get available models
const availableModels = SUPPORTED_MODEL_IDS;

// ‚ùå Never hardcode model IDs
const modelId = "xai/grok-5"; // This doesn't exist!
```

2. **Use helper functions**:

```typescript
import { modelSupports, getLanguageModel } from "@/lib/ai/providers";

// ‚úÖ Type-safe capability checking
if (modelSupports(modelId, "reasoning")) {
  // Enable reasoning features
}

// ‚úÖ Safe model access
const model = getLanguageModel(modelId);
```

3. **Always validate model existence**:

```typescript
import { isModelSupported } from "@/lib/constants";

if (!isModelSupported(selectedModelId)) {
  throw new Error(`Model ${selectedModelId} not found`);
}
```

## Testing Rules

### Test Model References

**In tests, only reference models that exist in the configuration**:

```typescript
// ‚úÖ Good - Uses actual configuration model
const testModel = "xai/grok-3-mini";

// ‚ùå Bad - Uses non-existent model
const testModel = "xai/grok-5"; // This doesn't exist!
```

### Test Model Access

```typescript
// ‚úÖ Good - Test actual capabilities
describe("Model Capabilities", () => {
  it("should have correct reasoning support", () => {
    expect(modelSupports("xai/grok-3-mini", "reasoning")).toBe(true);
    expect(modelSupports("openai/gpt-3.5-turbo", "reasoning")).toBe(false);
  });
});
```

## Common Mistakes to Avoid

### ‚ùå Don't Do This

```typescript
// Hardcoding non-existent models
const reasoningModel = "xai/grok-3-reasoning"; // Doesn't exist

// Using legacy model references
const model = myProvider.languageModel("title-model"); // Old architecture

// Assuming capabilities without checking
if (modelId.includes("reasoning")) {
  // Wrong approach - check actual capabilities
  enableReasoning();
}

// Using old provider patterns
const models = customProvider({
  languageModels: {
    /* custom mapping */
  },
}); // Replaced by gateway
```

### ‚úÖ Do This Instead

```typescript
// Use unified configuration
import { getModelCapabilities, DEFAULT_MODEL } from "@/lib/constants";
import { getLanguageModel, modelSupports } from "@/lib/ai/providers";

// Check capabilities properly
if (modelSupports(selectedModel, "reasoning")) {
  enableReasoning();
}

// Use gateway architecture
const model = getLanguageModel(DEFAULT_MODEL);
const capabilities = getModelCapabilities(selectedModel);
```

## Server Actions & Artifacts Rules

### Server Actions

```typescript
// ‚úÖ CORRECT - Use constants, not hardcoded models
export async function generateTitleFromUserMessage({
  message,
}: {
  message: UIMessage;
}) {
  const { text: title } = await generateText({
    model: getLanguageModel(DEFAULT_MODEL), // Dynamic, not hardcoded
    system: "Generate a short title...",
    prompt: JSON.stringify(message),
  });
  return title;
}
```

### Artifact Handlers

```typescript
// ‚úÖ CORRECT - Use user's selected model
export const textDocumentHandler = createDocumentHandler<"text">({
  kind: "text",
  onCreateDocument: async ({ title, selectedModel }) => {
    const { fullStream } = streamText({
      model: getLanguageModel(selectedModel.id), // User's choice
      system: "Write about the given topic...",
      prompt: title,
    });
  },
});
```

### Image Generation

```typescript
// ‚úÖ CORRECT - Use configurable image model
export const imageDocumentHandler = createDocumentHandler<"image">({
  kind: "image",
  onCreateDocument: async ({ title }) => {
    const { image } = await experimental_generateImage({
      model: gateway.imageModel(DEFAULT_IMAGE_MODEL), // Configurable
      prompt: title,
    });
  },
});
```

## API Route Rules

### Model Validation

```typescript
// ‚úÖ CORRECT - Validate against configuration
import { getAllowedModelIdsForUser } from "@/lib/ai/entitlements";
import { validateModelAccess } from "@/lib/security";

const allowedModelIds = getAllowedModelIdsForUser(userType);
validateModelAccess(selectedChatModel, userType, userId, allowedModelIds);
```

### Dynamic Configuration

```typescript
// ‚úÖ CORRECT - Use capabilities for feature control
const supportsArtifacts = modelSupports(selectedChatModel, "artifacts");
const supportsReasoning = modelSupports(selectedChatModel, "reasoning");

const result = await streamText({
  model: getLanguageModel(selectedChatModel),
  experimental_activeTools: supportsArtifacts
    ? ["getWeather", "createDocument", "updateDocument"]
    : ["getWeather"],
});
```

## Error Prevention Checklist

Before committing any model-related changes:

- [ ] ‚úÖ Model exists in `SUPPORTED_MODELS` configuration
- [ ] ‚úÖ Using `getLanguageModel()` instead of hardcoded references
- [ ] ‚úÖ Checking capabilities with `modelSupports()`
- [ ] ‚úÖ Validating model access with `isModelSupported()`
- [ ] ‚úÖ No hardcoded model IDs in code
- [ ] ‚úÖ Using constants from `lib/constants.ts`
- [ ] ‚úÖ Tests use actual configuration models
- [ ] ‚úÖ Build passes without errors

## Quick Reference

### Current Architecture Summary

```typescript
// Unified Configuration (1 source of truth)
SUPPORTED_MODELS = {
  /* all models with capabilities */
};
SUPPORTED_MODEL_IDS = Object.keys(SUPPORTED_MODELS);

// Gateway Access
gateway.languageModel(modelId); // Text models
gateway.imageModel(modelId); // Image models

// Helper Functions
getLanguageModel(modelId); // With reasoning middleware
modelSupports(modelId, feature); // Capability checking
isModelSupported(modelId); // Validation
getModelCapabilities(modelId); // Get all capabilities

// Default Models
DEFAULT_MODEL = "xai/grok-3-mini";
DEFAULT_IMAGE_MODEL = "xai/grok-2-image-1212";
```

Remember: **When in doubt, check [lib/constants.ts](mdc:lib/constants.ts) first!** This is the single source of truth for all model configuration in the AI SDK Gateway architecture.
