---
alwaysApply: false
globs: components/messages.tsx
description: "Prevents editing deprecated messages.tsx file - use compare-message.tsx instead"
---

# DEPRECATED: messages.tsx File

## 🚨 DO NOT EDIT THIS FILE

**File:** `components/messages.tsx`  
**Status:** DEPRECATED  
**Replacement:** `components/compare-message.tsx`

## Why This File is Deprecated

The `messages.tsx` file has been **deprecated** as part of the unified compare architecture. The application now operates exclusively in compare mode, and all message rendering is handled through `compare-message.tsx` as the defacto entry point.

### Historical Context

- **Legacy Purpose**: Originally handled both regular chat and compare mode rendering
- **Problem**: Dual-mode logic created complexity and maintenance overhead
- **Solution**: Unified architecture where compare mode is the only mode

## Migration Path

### ❌ Instead of editing messages.tsx:

```tsx
// DON'T DO THIS - messages.tsx is deprecated
export function Messages({ ... }) {
  // Complex dual-mode logic
  if (isCompareMode) {
    // Compare mode rendering
  } else {
    // Regular chat rendering
  }
}
```

### ✅ Use compare-message.tsx:

```tsx
// DO THIS - Use the unified compare architecture
export function CompareMessage({ data, ... }) {
  // All message rendering in one place
  // No conditional logic needed
}
```

## Current Architecture

### Unified Compare Mode

```
┌─────────────────────────────────────┐
│       compare-message.tsx           │ ← 🚨 ENTRY POINT
│  (Handles all message rendering)    │
│                                     │
│  Features:                         │
│  • Single model cards               │
│  • Multi-model comparison           │
│  • Mobile responsive                │
│  • Real-time streaming              │
│  • Smooth animations                │
└─────────────────────────────────────┘
```

### What messages.tsx Still Does (Legacy Support)

- **Read-only**: Only renders existing regular messages
- **No new development**: All new features go to compare-message.tsx
- **Gradual migration**: Supports existing chats during transition

## Development Guidelines

### ✅ DO:

- **Edit compare-message.tsx** for all new message rendering features
- **Add new components** to the compare architecture
- **Use the unified entry point** for all message interactions
- **Follow the compare-message.tsx patterns** for consistency

### ❌ DON'T:

- **Edit messages.tsx** - it's deprecated
- **Add new features** to messages.tsx
- **Use dual-mode logic** anywhere in the codebase
- **Create new message rendering components** outside compare-message.tsx

## Breaking Changes from Legacy

### Before (Dual Mode):

```tsx
// Old approach - complex and error-prone
const Messages = ({ messages, compareRuns, isCompareMode }) => {
  if (isCompareMode) {
    return <CompareModeRenderer />;
  } else {
    return <RegularChatRenderer />;
  }
};
```

### After (Unified):

```tsx
// New approach - simple and maintainable
const CompareMessage = ({ data }) => {
  // Always compare mode
  return <UnifiedMessageRenderer data={data} />;
};
```

## Migration Checklist

### ✅ Completed:

- [x] Unified compare architecture implemented
- [x] compare-message.tsx established as entry point
- [x] All new features use compare-message.tsx
- [x] Cursor Rules updated to reflect new architecture
- [x] Development guidelines documented

### 📋 Future Tasks:

- [ ] Remove messages.tsx from codebase (after full migration)
- [ ] Update all documentation references
- [ ] Clean up legacy imports
- [ ] Remove deprecated dual-mode logic

## Emergency Contact

If you **absolutely must** edit messages.tsx for a critical bug fix:

1. **Document the reason** in a code comment
2. **Notify the team** immediately
3. **Plan migration** to compare-message.tsx
4. **Add TODO** for proper migration

## Key Benefits of New Architecture

- **🚀 Simplified**: Single code path, no conditional logic
- **🔧 Maintainable**: One place for all message rendering
- **📱 Mobile-First**: Optimized for all devices
- **⚡ Performance**: Optimized rendering and animations
- **🎯 Focused**: Dedicated to compare functionality

This unified approach eliminates complexity while providing a superior user experience across all devices and interaction modes.
