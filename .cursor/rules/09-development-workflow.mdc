---
alwaysApply: true
description: Development workflow guidelines for efficient code changes and testing
---

# Development Workflow Rules

## 🚀 Efficient Development Practices

### Build and Linting Strategy

**PREFER linting over full builds** for routine code changes:

```bash
# ✅ PREFERRED: Use linting for quick validation
pnpm lint
pnpm format

# ❌ AVOID: Full builds for every small change
pnpm run build  # Only use when specifically needed
```

### When to Use Each Tool

#### Use `pnpm lint` or `read_lints` for:

- ✅ **TypeScript type checking** - Fast validation of types
- ✅ **ESLint rule validation** - Code quality checks
- ✅ **Import/export validation** - Dependency verification
- ✅ **Syntax error detection** - Quick error catching
- ✅ **After routine edits** - Component updates, prop changes, etc.

#### Only use `pnpm run build` when:

- 🔄 **Major architecture changes** - New routes, providers, schemas
- 🔄 **Database migrations** - Schema updates requiring migration
- 🔄 **New dependencies** - Package additions or major updates
- 🔄 **Production readiness** - Final validation before deployment
- 🔄 **Debugging build-specific issues** - When linting passes but build fails

### Dev Server Management

**NEVER start dev servers unnecessarily:**

```bash
# ❌ DON'T DO THIS: Starting dev when already running
pnpm dev  # Check if already running first!

# ✅ DO THIS: Check if dev server is already running
# Look for terminal output showing "Ready" or "Compiled"
# Check for "http://localhost:3000" in terminal history
```

#### Dev Server Rules:

- ✅ **Check terminal history** for existing dev server
- ✅ **Look for "Ready" or "Compiled" messages** in terminal output
- ✅ **Only start `pnpm dev`** when explicitly requested by user
- ❌ **Never run `pnpm dev`** automatically after code changes
- ❌ **Never run background `pnpm dev`** without user request

### Workflow Examples

#### ✅ Efficient Component Update Workflow:

1. Make code changes (edit components, add props, etc.)
2. Run `pnpm lint` or `read_lints` for quick validation
3. Fix any linting errors
4. Continue with next changes

#### ✅ Efficient API Route Update Workflow:

1. Update API route logic
2. Run `read_lints` to check TypeScript types
3. Test endpoint if needed
4. Continue development

#### ❌ Inefficient Workflow (Avoid):

1. Make small component change
2. Run `pnpm run build` (slow, unnecessary)
3. Run `pnpm dev` (when already running)
4. Wait for long build process

### Error Handling Strategy

**Progressive error resolution:**

```bash
# Step 1: Quick validation
pnpm lint

# Step 2: If linting passes but issues persist
read_lints [specific-file-path]

# Step 3: Only if necessary
pnpm run build
```

### Terminal State Awareness

**Always check terminal state before running commands:**

- ✅ **Look for existing processes** in terminal output
- ✅ **Check for "Ready" status** from dev server
- ✅ **Observe "Compiled" messages** indicating active development
- ❌ **Don't assume terminal is empty** without checking

### Performance Optimization

**Minimize command overhead:**

- **Parallel linting**: Use `read_lints` with specific file paths for targeted checks
- **Batch changes**: Make multiple related edits before validation
- **Smart validation**: Only run full builds when architecture changes
- **Context awareness**: Check existing processes before starting new ones

### Exception Cases

**When full builds ARE necessary:**

1. **Database schema changes** - Migrations require build validation
2. **New route creation** - App router needs build verification
3. **Provider configuration** - AI SDK changes need full validation
4. **Package.json updates** - Dependency changes require build
5. **Environment variable changes** - Config updates need build validation

### Quick Reference Commands

```bash
# ✅ Daily development (fast)
pnpm lint                    # Type checking + ESLint
read_lints [file-path]      # Targeted file validation

# 🔄 Occasional validation (slower)
pnpm run build              # Full production build
pnpm dev                    # Development server (only when needed)

# 🧹 Code quality
pnpm format                 # Code formatting
```

## Implementation Notes

- **This rule applies to ALL file types** since workflow applies across the codebase
- **Prioritize developer efficiency** over comprehensive validation for routine changes
- **Reserve heavy operations** for significant architectural changes
- **Always respect existing terminal processes** and user development environment

---

> 💡 **Remember**: Fast feedback loops with linting enable rapid iteration. Save full builds for when they're truly needed.
