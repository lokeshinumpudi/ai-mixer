---
alwaysApply: true
description: Core architecture and project structure patterns for the AI chatbot playground
---

# AI Chatbot Playground Architecture

This is a Next.js 15 AI chatbot application built with the AI SDK, featuring real-time streaming, artifacts generation, and multi-modal interactions.

## Project Structure

### Core Directories

- **[app/](mdc:app/)** - Next.js App Router with route groups
  - **[(auth)/](<mdc:app/(auth)/>)** - Authentication routes and logic
  - **[(chat)/](<mdc:app/(chat)/>)** - Chat interface and functionality
- **[components/](mdc:components/)** - Reusable UI components using shadcn/ui + Tailwind
- **[lib/](mdc:lib/)** - Core application logic and utilities
  - **[ai/](mdc:lib/ai/)** - AI SDK integration, models, tools, and prompts
  - **[db/](mdc:lib/db/)** - Database schema, queries, and Drizzle ORM setup
  - **[artifacts/](mdc:lib/artifacts/)** - Artifact system server-side logic
- **[artifacts/](mdc:artifacts/)** - Artifact system implementation (text, code, image, sheet)
- **[hooks/](mdc:hooks/)** - Custom React hooks for reusable logic

### Route Organization

- Uses **route groups** `(auth)` and `(chat)` for logical organization without affecting URL structure
- **Server Actions** in dedicated `actions.ts` files for server-side operations
- **API routes** follow RESTful patterns with proper error handling

## Key Technologies

### Frontend Stack

- **Next.js 15** with App Router and React Server Components
- **AI SDK v5** for chat functionality with streaming and tool calling
- **shadcn/ui + Tailwind CSS** for UI components and styling
- **Framer Motion** for animations and transitions
- **TypeScript** throughout for type safety

### Backend Stack

- **Drizzle ORM + PostgreSQL** for data persistence
- **Auth.js v5** for authentication (free + pro users)
- **Razorpay** for payments and subscription management
- **Server Actions** for database operations
- **Usage tracking** for message limits and billing

### AI Integration

- **AI SDK v5 with Gateway** - Unified provider access
- **Dynamic model management** - Capability-based features
- **Tool calling** with structured schemas using Zod
- **Streaming responses** with real-time data updates
- **Multi-modal inputs** supporting text, images, and files
- **Usage-aware rate limiting** - Message count enforcement

## Core Patterns

### Component Architecture

- **Client components** marked with `'use client'` for interactivity
- **Server components** by default for better performance
- **Custom hooks** for complex state management and reusable logic
- **Type-safe props** with proper TypeScript interfaces

### State Management

- **React hooks** (useState, useEffect) for local state
- **SWR** for server state management and caching
- **Custom hooks** for complex logic abstraction
- **Context providers** for global state (DataStream, Theme)

### Data Flow

- **Server Actions** for mutations and database operations
- **API routes** with security middleware and rate limiting
- **Real-time streaming** with usage tracking updates
- **Optimistic updates** with SWR mutations
- **Message-based billing** with real-time limit enforcement

### Error Handling

- **Custom error classes** in [lib/errors.ts](mdc:lib/errors.ts)
- **Error boundaries** for graceful fallbacks
- **Toast notifications** for user feedback
- **Type-safe error responses** from API routes

## Development Guidelines

### File Naming

- Use **kebab-case** for file and directory names
- **PascalCase** for React components
- **camelCase** for functions and variables
- **UPPER_SNAKE_CASE** for constants

### Import Organization

- **External libraries** first
- **Internal modules** grouped by domain
- **Relative imports** last
- Use **path aliases** (@/) for cleaner imports

### Type Safety

- **Strict TypeScript** configuration
- **Infer types** from database schema using Drizzle
- **Zod schemas** for runtime validation
- **Proper generic usage** for reusable components

### Performance

- **Server components** by default
- **Dynamic imports** for large components
- **Image optimization** with Next.js Image component
- **Bundle analysis** and code splitting
