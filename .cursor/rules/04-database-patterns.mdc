---
alwaysApply: true
globs: "lib/db/**/*,drizzle.config.ts"
description: "Schema guidelines and centralized query patterns with Drizzle ORM."
---

# 04: Database Patterns

## Core Principles

- **Drizzle ORM**: Use Drizzle for all database interactions to ensure type safety.
- **Centralized Queries**: All database queries **MUST** be located in `lib/db/queries.ts`. This provides a single source of truth for data access logic, making the codebase easier to maintain and test.
- **Supabase ID as Primary Key**: The `user` table's primary key is the user's Supabase ID, not an auto-generated UUID.

## Schema Design

The database schema is defined in `lib/db/schema.ts`.

- **Type Inference**: Use Drizzle's `InferSelectModel` to automatically generate TypeScript types from your table schemas.
- **Foreign Keys**: Enforce data integrity by using foreign key constraints to link related tables (e.g., `chat.userId` references `user.id`).
- **User-Scoped Data**: Nearly all tables should have a `userId` column to ensure data is properly associated with a user.

```typescript
// lib/db/schema.ts
export const chat = pgTable("Chat", {
  id: uuid("id").primaryKey().notNull().defaultRandom(),
  title: text("title").notNull(),
  userId: uuid("userId") // Foreign key to the user table
    .notNull()
    .references(() => user.id),
});
```

## Query Organization

All database logic must be abstracted into functions within `lib/db/queries.ts`. API routes and other server-side code should call these functions instead of interacting with the database directly.

### ✅ Correct Pattern

```typescript
// lib/db/queries.ts
export async function getChatsByUserId(userId: string) {
  try {
    return await db.select().from(chat).where(eq(chat.userId, userId));
  } catch (error) {
    throw new ChatSDKError("bad_request:database", "Failed to get chats");
  }
}

// app/api/history/route.ts
import { getChatsByUserId } from "@/lib/db/queries";

export const GET = protectedRoute(async (req, context, user) => {
  const chats = await getChatsByUserId(user.id);
  return Response.json(chats);
});
```

### ❌ Incorrect Pattern

```typescript
// app/api/history/route.ts
// ❌ BAD: Database logic mixed with route logic
export const GET = protectedRoute(async (req, context, user) => {
  // ❌ This query should be in `lib/db/queries.ts`
  const chats = await db.select().from(chat).where(eq(chat.userId, user.id));
  return Response.json(chats);
});
```

## Migrations

Database schema changes are managed using Drizzle's migration system.

- **Generate**: `pnpm db:generate` to create a new migration file based on schema changes.
- **Apply**: `pnpm db:migrate` to apply pending migrations to the database.
- **Studio**: `pnpm db:studio` to open a local GUI for viewing and editing the database.
